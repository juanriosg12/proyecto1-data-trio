import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

# Leer el archivo CSV
datab = pd.read_csv(r"C:\Users\USER\OneDrive - Universidad de los andes\Analitica comp\Proyecto\SeoulBikeData_utf8.csv")

# Convertir la columna 'Date' en formato de fecha y extraer la hora
datab['Date'] = pd.to_datetime(datab['Date'], dayfirst=True)


# Preparar los datos para el mapa de calor
heatmap_data = datab.groupby(['Hour', 'Solar Radiation (MJ/m2)']).agg({'Rented Bike Count':'sum'}).reset_index()

# Estilos externos
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

# Inicializar la app Dash
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

# Lista de escalas de colores
colorscales = px.colors.named_colorscales()

# Definir el layout de la app
app.layout = html.Div(children=[
    html.H1(children='Mapa de calor: Demanda de bicicletas y radiación solar a lo largo del día'),
    html.P("Selecciona una escala de colores:"),
    dcc.Dropdown(
        id='colorscale-dropdown', 
        options=[{'label': scale, 'value': scale} for scale in colorscales],
        value='Viridis'  # Valor predeterminado
    ),
    dcc.Graph(id='heatmap-graph')
])

# Definir el callback para actualizar el gráfico
@app.callback(
    Output('heatmap-graph', 'figure'),
    Input('colorscale-dropdown', 'value')
)
def update_heatmap(colorscale):
    fig = px.density_heatmap(heatmap_data, 
                             x='Hour', 
                             y='Solar Radiation (MJ/m2)', 
                             z='Rented Bike Count', 
                             color_continuous_scale=colorscale, 
                             labels={'Hour': 'Hora del día', 
                                     'Solar Radiation (MJ/m2)': 'Radiación Solar (MJ/m²)', 
                                     'Rented Bike Count': 'Cantidad de bicicletas rentadas'})
    fig.update_layout(coloraxis_colorbar_title='Demanda de bicicletas')
    return fig

# Ejecutar la app
if __name__ == '__main__':
    app.run_server(debug=True)
