import dash
from dash import dcc  # dash core components
from dash import html # dash html components 
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

# Cargar los datos
datab = pd.read_csv(r"C:\Users\USER\OneDrive - Universidad de los andes\Analitica comp\Proyecto\SeoulBikeData_utf8.csv")

# Convertir la columna "Date" al formato de fecha
datab['Date'] = pd.to_datetime(datab['Date'], format='%d/%m/%Y')

x_options = {
    'Temperature(C)': 'Temperatura (C)',
    'Humidity(%)': 'Humedad (%)',
    'Wind speed (m/s)': 'Velocidad del viento (m/s)',
    'Visibility (10m)': 'Visibilidad (10m)',
    'Solar Radiation (MJ/m2)': 'Radiación Solar (MJ/m2)'}

app.layout = html.Div([
    html.Div([

        # Dropdown para el eje X (nuevas opciones)
        html.Div([
            dcc.Dropdown(
                id='xaxis-column',
                options=[
                    {'label': 'Temperatura (C)', 'value': 'Temperature(C)'},
                    {'label': 'Humedad (%)', 'value': 'Humidity(%)'},
                    {'label': 'Velocidad del viento (m/s)', 'value': 'Wind speed (m/s)'},
                    {'label': 'Visibilidad (10m)', 'value': 'Visibility (10m)'},
                    {'label': 'Radiación Solar (MJ/m2)', 'value': 'Solar Radiation (MJ/m2)'}
                ],
                value='Wind speed (m/s)'  # Valor por defecto
            ),
        ],
        style={'width': '48%', 'display': 'inline-block'}),

        # Dropdown para el eje Y (solo "Rented Bike Count")
        html.Div([
            dcc.Dropdown(
                id='yaxis-column',
                options=[{'label': 'Demanda Bicicletas', 'value': 'Rented Bike Count'}],  # Solo esta opción disponible
                value='Rented Bike Count'  # Valor por defecto
            ),
        ], style={'width': '48%', 'float': 'right', 'display': 'inline-block'})
    ]),

    dcc.Graph(id='indicator-graphic'),
])

@app.callback(
    Output('indicator-graphic', 'figure'),
    [Input('xaxis-column', 'value'),
     Input('yaxis-column', 'value')])
def update_graph(xaxis_column_name, yaxis_column_name):
    dff = datab  # Usar todo el DataFrame sin filtrar por mes

    # Crear gráfica de dispersión
    fig = px.scatter(dff, x=xaxis_column_name,  # Variable seleccionada en el eje X
                     y=yaxis_column_name,  # Rented Bike Count en el eje Y
                     hover_name=dff['Date'],  color_discrete_sequence=['#ba69cf'])

    # Añadir título a la gráfica
    fig.update_layout(
        title=f'Dispersión de {yaxis_column_name} vs {xaxis_column_name}',  # Título dinámico basado en los ejes seleccionados
        margin={'l': 60, 'b': 60, 't': 60, 'r': 0},  # Aumentar el margen superior para que el título tenga más espacio
        hovermode='closest',
        plot_bgcolor='rgba(0, 0, 0, 0)',
    )

    # Configuración del eje X
    fig.update_xaxes(title=x_options.get(xaxis_column_name, xaxis_column_name), 
                     type='linear',ticks='outside', showline=True, gridcolor='lightgrey', linecolor='black',)

    # Configuración del eje Y
    fig.update_yaxes(title='Demanda Bicicletas', 
                     type='linear',ticks='outside', showline=True, gridcolor='lightgrey', linecolor='black',)

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
